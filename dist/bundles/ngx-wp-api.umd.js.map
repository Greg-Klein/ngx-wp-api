{"version":3,"file":"ngx-wp-api.umd.js","sources":["../../../build/src/ngx-wp-api.module.ts","../../../build/src/services/wp-endpoints.service.ts","../../../build/src/services/wp-endpoint.helper.ts"],"sourcesContent":["import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WpEndpointsService } from './services/wp-endpoints.service';\r\n\r\nexport * from './services/wp-endpoints.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class NgxWpApiModule {\r\n  static forRoot(rootUrl: string): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxWpApiModule,\r\n      providers: [WpEndpointsService, { provide: 'rootUrl', useValue: rootUrl }]\r\n    };\r\n  }\r\n}\r\n","/**\r\n * This is the service responsible for generating Wp endpoints\r\n */\r\n\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Inject } from '@angular/core';\r\nimport { WpEndpointHelper } from './wp-endpoint.helper';\r\n\r\n@Injectable()\r\nexport class WpEndpointsService {\r\n  private token: string;\r\n\r\n  private postEndpoint: WpEndpointHelper;\r\n  private commentEndpoint: WpEndpointHelper;\r\n  private categoryEndpoint: WpEndpointHelper;\r\n  private tagEndpoint: WpEndpointHelper;\r\n  private pageEndpoint: WpEndpointHelper;\r\n  private userEndpoint: WpEndpointHelper;\r\n  private mediaEndpoint: WpEndpointHelper;\r\n\r\n  constructor(@Inject('rootUrl') private rootUrl: string, private http: HttpClient) {}\r\n\r\n  setAuthToken(token: string) {\r\n    this.token = token;\r\n  }\r\n\r\n  posts(): WpEndpointHelper {\r\n    if (!this.postEndpoint) {\r\n      this.postEndpoint = new WpEndpointHelper(`${this.rootUrl}/wp-json/wp/v2/posts`, this.token, this.http);\r\n    }\r\n    return this.postEndpoint;\r\n  }\r\n\r\n  comments(): WpEndpointHelper {\r\n    if (!this.commentEndpoint) {\r\n      this.commentEndpoint = new WpEndpointHelper(`${this.rootUrl}/wp-json/wp/v2/comments`, this.token, this.http);\r\n    }\r\n    return this.commentEndpoint;\r\n  }\r\n\r\n  categories(): WpEndpointHelper {\r\n    if (!this.categoryEndpoint) {\r\n      this.categoryEndpoint = new WpEndpointHelper(`${this.rootUrl}/wp-json/wp/v2/categories`, this.token, this.http);\r\n    }\r\n    return this.categoryEndpoint;\r\n  }\r\n\r\n  tags(): WpEndpointHelper {\r\n    if (!this.tagEndpoint) {\r\n      this.tagEndpoint = new WpEndpointHelper(`${this.rootUrl}/wp-json/wp/v2/tags`, this.token, this.http);\r\n    }\r\n    return this.tagEndpoint;\r\n  }\r\n\r\n  pages(): WpEndpointHelper {\r\n    if (!this.pageEndpoint) {\r\n      this.pageEndpoint = new WpEndpointHelper(`${this.rootUrl}/wp-json/wp/v2/pages`, this.token, this.http);\r\n    }\r\n    return this.pageEndpoint;\r\n  }\r\n\r\n  users(): WpEndpointHelper {\r\n    if (!this.userEndpoint) {\r\n      this.userEndpoint = new WpEndpointHelper(`${this.rootUrl}/wp-json/wp/v2/users`, this.token, this.http);\r\n    }\r\n    return this.userEndpoint;\r\n  }\r\n\r\n  medias(): WpEndpointHelper {\r\n    if (!this.mediaEndpoint) {\r\n      this.mediaEndpoint = new WpEndpointHelper(`${this.rootUrl}/wp-json/wp/v2/media`, this.token, this.http);\r\n    }\r\n    return this.mediaEndpoint;\r\n  }\r\n}\r\n","/**\r\n * This is the base class for a Wp endpoint\r\n */\r\n\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nexport class WpEndpointHelper {\r\n  url: string;\r\n  token: string;\r\n  options = {\r\n    headers: {},\r\n    observe: 'body',\r\n    params: new HttpParams(),\r\n    responseType: 'json'\r\n  };\r\n\r\n  constructor(endpointUrl: string, token: string, private _http: HttpClient) {\r\n    this.url = endpointUrl;\r\n    this.token = token;\r\n  }\r\n\r\n  /**\r\n   * Get a collection of elements\r\n   * @param options Request options\r\n   */\r\n  get(options: any = this.options): Observable<any> {\r\n    return this._http.get(this.url, this.getOptions(options));\r\n  }\r\n\r\n  /**\r\n   * Get a single element\r\n   * @param id Element id\r\n   * @param options Request options\r\n   */\r\n  getItem(id: number, options: any = {}): Observable<any> {\r\n    return this._http.get(`${this.url}/${id}`, this.getOptions(options));\r\n  }\r\n\r\n  /**\r\n   * Post an element\r\n   * @param body Request body\r\n   * @param options Request options\r\n   */\r\n  post(body: any, options: any = {}): Observable<any> {\r\n    return this._http.post(this.url, body, this.getOptions(options));\r\n  }\r\n\r\n  /**\r\n   * Update an element\r\n   * @param id Element id\r\n   * @param body Request body\r\n   * @param options Request options\r\n   */\r\n  put(id: number, body: any, options: any = {}): Observable<any> {\r\n    return this._http.put(`${this.url}/${id}`, body, this.getOptions(options));\r\n  }\r\n\r\n  /**\r\n   * Delete an element\r\n   * @param id Element id\r\n   * @param options Request options\r\n   */\r\n  delete(id: number, options: any = {}): Observable<any> {\r\n    options.responseType = 'text';\r\n    return this._http.delete(`${this.url}/${id}?force=true`, this.getOptions(options));\r\n  }\r\n\r\n  /* --- Utils --- */\r\n\r\n  /**\r\n   * Adds the authentication header and response formatting to the request options\r\n   * @param options Request options\r\n   */\r\n  getOptions(options: any): any {\r\n    let headers = options.headers || {};\r\n\r\n    if (this.token) {\r\n      headers = { ...headers, Authorization: `Basic ${this.token}` };\r\n    }\r\n\r\n    options.headers = new HttpHeaders(headers);\r\n    options.observe = 'response';\r\n    return options;\r\n  }\r\n}\r\n"],"names":["Injectable","HttpHeaders","HttpParams"],"mappings":"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"}